[user]
	name = j2deme
	email = j2deme@gmail.com
[color]
  branch = auto
  diff = auto
  status = auto
[color "branch"]
  current = red reverse
  local = blue
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = green
  changed = yellow
  untracked = cyan
  deleted = red
[merge]
	conflictstyle = diff3
[alias]
  st = status -s
  #sync = pull --rebase upstream master
  cl = clone
  ci = commit
  cm = commit -m
  cma = commit -a -m
  ca = commit --amend
  amend = commit --amend
  caa = commit -a --amend -C HEAD
  filelog = log -u
  fl = log -u
  ai = add --interactive
  co = checkout
  br = branch
  #"!git branch -ra | grep -v done"
  bra = branch -ra
  branch = branch -ra
  #list commands
  le = log --oneline --decorate
  # Simple log list
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  # List commit showing changed files
  ll  = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  # One line commits with date
  lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
  # One line commits with relative date
  ld = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lc  = "!f() { git ll "$1"^.."$1"; }; f"
  # List no colors
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  # list all aliases
  la = "!git config -l | grep alias | cut -c 7-"
  diff = diff --word-diff
  d = diff --word-diff
  dc = diff --cached
  # list modified files in last commit
  dl = "!git ll -1"
  last = "!git ll -1"
  # diff last commit
  dlc = diff --cached HEAD^
  dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
  diffr  = "!f() { git diff "$1"^.."$1"; }; f"
  # reset commands
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  # stash
  sl = stash list
  sa = stash apply
  ss = stash save
  cp = cherry-pick
  grep = grep -Ii
  gr = grep -Ii
  # grep from root folder
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  # grep on filename
  find = "!git ls-files | grep -i"
  f = "!git ls-files | grep -i"
  #rename branch tree to done-
  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
  # assume aliases
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  # show assumed files
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  # unassume all the assumed files
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  # tags
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0
  # merges
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"
  # list remotes
  rem="!git config -l | grep remote.*url | tail -n +2"
  # apply patch from other local repo
  lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"
  # subtree add
  sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
  # initial empty commit
  empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"
[push]
	default = simple
[giggle]
	main-window-maximized = true
	main-window-geometry = 0x0+0+0
	main-window-view = HistoryView
	file-view-vpane-position = 463
	history-view-vpane-position = 338
	file-view-hpane-position = 257
[diff]
	tool = meld
